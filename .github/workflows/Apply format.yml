name: Apply format

on:
  issue_comment:
    types: [created, edited]

jobs:
  do-format:
    name: Format Core
    # Check that the comment comes from a Pull Request, and not from a regular Issue.
    # Also look for "/format" command in comment body.
    if: ${{ github.event.issue.pull_request }} && contains(${{ github.event.comment.body }}, '/format')
    runs-on: ubuntu-latest
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the
      # added or changed files to the repository.
      contents: write

    steps:
      - # retrieve PR info
        name: Request PR data from GitHub API
        uses: octokit/request-action@v2.x
        id: get_PR
        with:
          route: GET /repos/:repo/pulls/:pull_number
          repo: ${{ github.repository }}
          pull_number: ${{ github.event.issue.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - # get PR HEAD commit sha 
        # output is 'sha'
        name: Set PR HEAD commit to output
        id: get_commit
        run: | 
           prsha=$(echo $response | jq '.head.sha' | tr -d '"')
           echo "::set-output name=sha::$prsha" 
        env: 
          response: ${{ steps.get_PR.outputs.data }}
      
      - # get PR branch name
        # output is 'ref'
        name: Set PR branch name to output
        id: get_branch
        run: | 
           prref=$(echo $response | jq '.head.ref' | tr -d '"')
           echo "::set-output name=ref::$prref" 
        env: 
          response: ${{ steps.get_PR.outputs.data }}

      - # Checkout PR HEAD commit (not the merge commit!)
        name: Git checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.get_commit.outputs.sha }}
          lfs: 'true'
          token: ${{ secrets.BUZZZH_GITHUB_TOKEN }}
      
      - 
        name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '>=1.21'
      
      - 
        name: Build Dagger program
        working-directory: ./ci/format
        run: go build -o format -v ./...
      
      - 
        name: Run Dagger program
        working-directory: ./ci/format
        # after execution, we remove the executable so it doesn't get committed on the next step
        run: ./format --apply-changes; rm ./format

      - # Create new commit with the changes
        name: Commit
        id: auto-commit
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Automated code formatting
          # commit_options: '--no-verify --signoff'
          commit_user_name: Buzzh Bot
          commit_user_email: buzzh@cu.bzh
          commit_author: Buzzh Bot <buzzh@cu.bzh>
          skip_dirty_check: true
          skip_fetch: true
          skip_checkout: true
          create_branch: false
          branch: ${{ steps.get_branch.outputs.ref }} # name of branch

      - 
        name: Format done
        if: steps.auto-commit.outputs.changes_detected == 'true'
        run: echo "Format done."
        
      - 
        name: No need to format
        if: steps.auto-commit.outputs.changes_detected == 'false'
        run: echo "No need to format."
